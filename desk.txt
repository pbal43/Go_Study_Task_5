Task 4 (Сделал все):
    Одинаково для каждого уровня - постараться реализовать правильную архитектуру папок.
    Весь написанный код должен быть в вашем GitHub репозитории. И решением будет ссылка на ваш github с готовым кодом.
    Easy

    Создайте RESTful API для управления списком задач (To-Do List). Реализуйте следующие маршруты:

    1. GET /tasks: Получить список всех задач.

    2. GET /tasks/:id: Получить информацию о задаче по ее ID.

    3. POST /tasks: Создать новую задачу.

    4. PUT /tasks/:id: Обновить информацию о задаче по ее ID.

    5. DELETE /tasks/:id: Удалить задачу по ее ID.

    Используйте структуры и слайсы для хранения информации о задачах. Каждая задача должна иметь уникальный идентификатор (ID), название (Title), описание (Description) и статус (Status), который может быть Новая, В процессе или Завершена.



    Middle

    Расширьте предыдущий API для управления списком пользователей. Создайте маршруты:

    1. GET /users: Получить список всех пользователей.

    2. GET /users/:id: Получить информацию о пользователе по его ID.

    3. POST /users: Создать нового пользователя.

    4. PUT /users/:id: Обновить информацию о пользователе по его ID.

    5.DELETE /users/:id: Удалить пользователя по его ID.

    Каждый пользователь должен иметь уникальный идентификатор (ID), имя (Name), адрес электронной почты (Email) и пароль (Password).



    Hard

    Расширьте API, добавив аутентификацию с использованием токена JWT (JSON Web Token). Создайте маршруты:

    1. POST /login: Вход пользователя, где можно отправить имя пользователя и пароль для получения токена.

    2. GET /profile: Получить информацию о текущем пользователе, требующую аутентификации с использованием токена.

    Защитите маршруты для управления задачами и пользователями с использованием Middleware для проверки наличия и валидности токена JWT.




Task 5 (Сделал Easy And Middle):

Easy

Добавить интеграцию с удаленной базой данный PostgreSQL.

Добавить миграции. И реализовать возможность запуска с использованием хранилища в памяти, если подключение к удаленной базе данных не было успешным.



Middle

Дополнительно к заданию Easy поменять модель задач, что бы в них хранился uid пользователя.

В следствии чего необходимо поменять логику запросов, что бы выводились задачи пользователя, который сейчас авторизован.

Подсказка: храните uid пользователя или jwt токен в cookie и при выполнении запроса проверяйте их, на наличие uid или токена.

Если нет ни того ни того - запрет доступа.



Hard

Easy + Middle + реализовать сохранение в json файл базы данных в памяти ( memstorage ) и при запуске сервера,

если подключение к удаленной бд успешно - добовлять записи из файла в удаленную бд.